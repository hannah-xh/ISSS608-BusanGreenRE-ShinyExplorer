{
  "hash": "cd799f2a72f8a04e9902ad5242fd2597",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MLR Model design\"\nauthor: \"Xiaohan Zhang\"\ndate: \"2025-3-26\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: false\n  warning: false\n  freeze: true\n---\n\n\n\n\n![](images/clipboard-3248582391.png)\n\n## 1. Introduction\n\nThis document presents a Multiple Linear Regression (MLR) analysis of property prices, examining various factors that influence real estate values. The analysis aims to identify key determinants of property prices and develop a predictive model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Load required packages\"}\n# Core packages\nlibrary(shiny)       # Shiny application framework\nlibrary(shinydashboard) # Dashboard interface\nlibrary(DT)          # Interactive data tables\nlibrary(ggplot2)     # Data visualization\nlibrary(dplyr)       # Data manipulation\nlibrary(tidyr)       # Data tidying\nlibrary(corrplot)    # Correlation matrix visualization\nlibrary(car)         # VIF calculation and regression diagnostics\nlibrary(GGally)      # Scatterplot matrices\nlibrary(MASS)        # Various statistical functions including BoxCox transformation\nlibrary(scales)      # Scale tools for improved visualization\nlibrary(plotly)      # Interactive charts\nlibrary(RColorBrewer) # Color schemes\nlibrary(readxl)      # Read Excel files\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Load dataset\"}\nProperty_data <- read_excel(\"data/Property_Price_and_Green_Index.xlsx\")\n\nglimpse(Property_data)\n```\n:::\n\n\n\n\n## 2. Data Preprocessing\n\nThe dataset requires preprocessing to ensure it's suitable for regression analysis, including handling missing values, converting categorical variables, and examining distributions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Data preprocessing functions\"}\n# Data preprocessing function\npreprocess_data <- function(data) {\n  # Create a copy to avoid modifying the original\n  df <- data %>% as.data.frame()\n  \n  # Convert season variables to factors\n  df <- df %>%\n    mutate(\n      Spring = as.factor(Spring),\n      Fall = as.factor(Fall),\n      Winter = as.factor(Winter),\n      Heating = as.factor(Heating),\n      `Top Univ.` = as.factor(`Top Univ.`)\n    )\n  \n  # Check for missing values\n  missing_summary <- colSums(is.na(df))\n  \n  # Handle missing values if any\n  if(any(missing_summary > 0)) {\n    # Fill numeric variables with median\n    for(col in names(df)) {\n      if(is.numeric(df[[col]]) && sum(is.na(df[[col]])) > 0) {\n        df[[col]][is.na(df[[col]])] <- median(df[[col]], na.rm = TRUE)\n      }\n    }\n  }\n  \n  return(list(\n    data = df,\n    missing_summary = missing_summary\n  ))\n}\n\n# Function to create a visualization sample for faster plotting\ncreate_viz_sample <- function(data, n = 10000) {\n  if(nrow(data) > n) {\n    return(data[sample(nrow(data), n), ])\n  } else {\n    return(data)\n  }\n}\n\n# Assuming Property_data is already loaded\n# Process the data (using full dataset)\nprocessed <- preprocess_data(Property_data)\ndata <- processed$data\n\n# Create visualization sample\nviz_data <- create_viz_sample(data)\n\n# Display missing values summary\ncat(\"Missing values summary:\\n\")\nif(sum(processed$missing_summary) == 0) {\n  cat(\"No missing values in the dataset.\\n\")\n} else {\n  print(processed$missing_summary[processed$missing_summary > 0])\n}\n\n# Basic data summary (based on full dataset)\ncat(\"\\nData summary (full dataset):\\n\")\nsummary(data)\n```\n:::\n\n\n\n\n## 3. Exploratory Data Analysis\n\nBefore building the model, we need to explore the distributions of key variables and identify potential issues.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Missing values visualization\"}\n# Plot missing values visualization\nmissing_plot <- function(data) {\n  missing_data <- data.frame(\n    variable = names(data),\n    count = colSums(is.na(data)),\n    percent = colSums(is.na(data)) / nrow(data) * 100\n  )\n  \n  ggplot(missing_data, aes(x = reorder(variable, -percent), y = percent)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    geom_text(aes(label = sprintf(\"%.1f%%\", percent)), \n              vjust = -0.5, size = 3) +\n    theme_minimal() +\n    labs(title = \"Missing Values by Variable\",\n         x = \"Variables\",\n         y = \"Percentage (%)\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n# Generate and display missing values plot (if any)\nif(sum(processed$missing_summary) > 0) {\n  missing_viz <- missing_plot(Property_data)  # Using full dataset for accurate percentages\n  print(missing_viz)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Variable distribution analysis\"}\n# Function to visualize variable distributions\nplot_distribution <- function(data, variable, full_data = NULL) {\n  var_data <- data[[variable]]\n  \n  # Calculate statistics from full dataset if provided\n  if(!is.null(full_data)) {\n    full_var_data <- full_data[[variable]]\n    mean_val <- mean(full_var_data, na.rm = TRUE)\n    median_val <- median(full_var_data, na.rm = TRUE)\n    skew_val <- skewness(full_var_data, na.rm = TRUE)\n    kurt_val <- kurtosis(full_var_data, na.rm = TRUE)\n  } else {\n    mean_val <- mean(var_data, na.rm = TRUE)\n    median_val <- median(var_data, na.rm = TRUE)\n    skew_val <- skewness(var_data, na.rm = TRUE)\n    kurt_val <- kurtosis(var_data, na.rm = TRUE)\n  }\n  \n  # Create histogram with density curve\n  ggplot(data.frame(value = var_data), aes(x = value)) +\n    geom_histogram(aes(y = ..density..), bins = 30, fill = \"lightblue\", color = \"darkblue\", alpha = 0.7) +\n    geom_density(color = \"red\", linewidth = 1) +\n    geom_vline(xintercept = mean_val, color = \"darkgreen\", linetype = \"dashed\", linewidth = 1) +\n    geom_vline(xintercept = median_val, color = \"purple\", linetype = \"dashed\", linewidth = 1) +\n    theme_minimal() +\n    labs(title = paste(\"Distribution of\", variable),\n         subtitle = paste(\"Skewness:\", round(skew_val, 2), \"| Kurtosis:\", round(kurt_val, 2)),\n         x = variable,\n         y = \"Density\",\n         caption = paste(\"Mean (green):\", round(mean_val, 2), \"| Median (purple):\", round(median_val, 2),\n                         ifelse(!is.null(full_data), \"\\nStatistics calculated on full dataset\", \"\")))\n}\n\n# Visualize the distribution of target variable (Property Prices)\nprice_dist <- plot_distribution(viz_data, \"Property Prices\", full_data = data)\nprint(price_dist)\n\n# Visualize distributions of numeric variables\nnumeric_vars <- names(data)[sapply(data, is.numeric)]\nfor(var in numeric_vars[1:5]) {  # Show first 5 variables as example\n  dist_plot <- plot_distribution(viz_data, var, full_data = data)\n  print(dist_plot)\n}\n```\n:::\n\n\n\n\n![](images/34f7cc10a5eae65d9dd26d5602c9785.png)\n\n![](images/deab234c8043d6b65a0fea554e31990.png)\n\n![](images/15931d5562440400372de4f46292fbe.png)\n\n![](images/331a954da23174d0058da04e279daf8.png)\n\n![](images/3732fa9fc72b03fad213469da1e9084.png)\n\n## 4. Variable Transformation\n\nProperty prices typically follow a right-skewed distribution. Transforming the target variable can improve model performance by creating more linear relationships with predictors.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Target variable transformation\"}\n# Simplified transform_variable function without complex Box-Cox\ntransform_variable <- function(data, variable, method) {\n  # Get the data\n  var_data <- data[[variable]]\n  \n  if(method == \"log\") {\n    # Log transformation\n    if(min(var_data, na.rm = TRUE) <= 0) {\n      const <- abs(min(var_data, na.rm = TRUE)) + 1\n      transformed <- log(var_data + const)\n      name <- paste0(\"log(\", variable, \" + \", const, \")\")\n    } else {\n      transformed <- log(var_data)\n      name <- paste0(\"log(\", variable, \")\")\n    }\n  } else if(method == \"sqrt\") {\n    # Square root transformation\n    if(min(var_data, na.rm = TRUE) < 0) {\n      const <- abs(min(var_data, na.rm = TRUE)) + 1\n      transformed <- sqrt(var_data + const)\n      name <- paste0(\"sqrt(\", variable, \" + \", const, \")\")\n    } else {\n      transformed <- sqrt(var_data)\n      name <- paste0(\"sqrt(\", variable, \")\")\n    }\n  } else if(method == \"boxcox\") {\n    # Simple Box-Cox approximation\n    if(min(var_data, na.rm = TRUE) <= 0) {\n      # Handle non-positive values\n      const <- abs(min(var_data, na.rm = TRUE)) + 1\n      temp_data <- var_data + const\n      \n      # Use simple log as Box-Cox approximation\n      transformed <- log(temp_data)\n      name <- paste0(\"log(\", variable, \" + \", const, \")\")\n    } else {\n      # Use log as simplified Box-Cox\n      transformed <- log(var_data)\n      name <- paste0(\"log(\", variable, \")\")\n    }\n  } else {\n    # No transformation\n    transformed <- var_data\n    name <- variable\n  }\n  \n  return(list(\n    transformed = transformed,\n    name = name,\n    original = var_data\n  ))\n}\n\n# Calculate transformations on full dataset\ncat(\"\\nCalculating transformations on full dataset...\\n\")\ntransformations <- c(\"original\", \"log\", \"sqrt\", \"boxcox\")\nprice_transforms <- lapply(transformations, function(method) {\n  if(method == \"original\") {\n    return(list(\n      transformed = data$`Property Prices`,\n      name = \"Original\",\n      original = data$`Property Prices`\n    ))\n  } else {\n    return(transform_variable(data, \"Property Prices\", method))\n  }\n})\n\n# Create sample transforms for visualization\nviz_transforms <- list()\nfor(i in seq_along(price_transforms)) {\n  # Get sample of original and transformed values for visualization\n  idx <- sample(length(price_transforms[[i]]$original), \n                min(10000, length(price_transforms[[i]]$original)))\n  \n  viz_transforms[[i]] <- list(\n    transformed = price_transforms[[i]]$transformed[idx],\n    name = price_transforms[[i]]$name,\n    original = price_transforms[[i]]$original[idx]\n  )\n}\n\n# Combine transformations into a data frame for plotting\ntransform_df <- data.frame(\n  original = viz_transforms[[1]]$original\n)\n\nfor(i in seq_along(viz_transforms)) {\n  transform_df[[viz_transforms[[i]]$name]] <- viz_transforms[[i]]$transformed\n}\n\n# Create comparison plots\ntransform_long <- reshape2::melt(transform_df, id.vars = NULL)\n\nggplot(transform_long, aes(x = value, fill = variable)) +\n  geom_density(alpha = 0.5) +\n  facet_wrap(~ variable, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Comparison of Transformations for Property Prices\",\n       subtitle = \"Based on sample data, transformations calculated on full dataset\",\n       x = \"Value\", y = \"Density\", fill = \"Transformation\")\n\n# Apply the best transformation (log in this case) to Property Prices\ncat(\"\\nApplying log transformation to full dataset...\\n\")\ndata$LogPrice <- transform_variable(data, \"Property Prices\", \"log\")$transformed\n\n# Compare the original and transformed distributions using sample\nviz_compare <- data.frame(\n  value = c(viz_data$`Property Prices`, \n            transform_variable(viz_data, \"Property Prices\", \"log\")$transformed),\n  type = factor(rep(c(\"Original\", \"Log-transformed\"), each = nrow(viz_data)))\n)\n\nggplot(viz_compare, aes(x = value, fill = type)) +\n  geom_density(alpha = 0.5) +\n  facet_wrap(~ type, scales = \"free\") +\n  theme_minimal() +\n  labs(title = \"Original vs. Log-transformed Property Prices\",\n       subtitle = \"Sample visualization, transformation parameters from full dataset\",\n       x = \"Value\", y = \"Density\", fill = \"\")\n\ncat(\"\\nData preparation complete. Full dataset has\", nrow(data), \"rows and\", ncol(data), \"columns.\\n\")\ncat(\"Log-transformed target variable added as 'LogPrice'.\\n\")\n```\n:::\n\n\n\n\n![](images/56211895e29c6618675b735ea98354d.png)\n\n## 5. MLR Pre-Check Functions\n\nBefore building the regression model, several checks are necessary to ensure valid analysis, including multicollinearity assessment, outlier detection, and linearity verification.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"MLR pre-check setup\"}\n# Load required packages for MLR pre-checks\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(corrplot)\nlibrary(car)\nlibrary(GGally)\nlibrary(gridExtra)\nlibrary(nortest)\n\n# Function to create a visualization sample for faster plotting\ncreate_viz_sample <- function(data, n = 10000) {\n  if(nrow(data) > n) {\n    return(data[sample(nrow(data), n), ])\n  } else {\n    return(data)\n  }\n}\n\n# Create visualization sample \nviz_data <- create_viz_sample(data)\n\ncat(\"Starting MLR pre-check analysis...\\n\")\ncat(\"Full dataset has\", nrow(data), \"rows and\", ncol(data), \"columns.\\n\")\ncat(\"Visualization sample has\", nrow(viz_data), \"rows.\\n\")\n```\n:::\n\n\n\n\n### 5.1 Multicollinearity Check\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Multicollinearity check functions\"}\n# Function to check multicollinearity\ncheck_multicollinearity <- function(data, threshold = 0.7) {\n  cat(\"Calculating correlation matrix on full dataset...\\n\")\n  \n  # Select only numeric variables\n  numeric_data <- data %>% select_if(is.numeric)\n  \n  # Calculate correlation matrix\n  cor_matrix <- cor(numeric_data, use = \"pairwise.complete.obs\")\n  \n  # Find highly correlated variables\n  high_cor <- which(abs(cor_matrix) > threshold & abs(cor_matrix) < 1, arr.ind = TRUE)\n  high_cor_pairs <- data.frame(\n    var1 = rownames(cor_matrix)[high_cor[,1]],\n    var2 = colnames(cor_matrix)[high_cor[,2]],\n    correlation = cor_matrix[high_cor]\n  )\n  \n  # Sort by absolute correlation value\n  high_cor_pairs$abs_corr <- abs(high_cor_pairs$correlation)\n  high_cor_pairs <- high_cor_pairs[order(-high_cor_pairs$abs_corr), ]\n  high_cor_pairs$abs_corr <- NULL\n  \n  cat(\"Correlation analysis complete.\\n\")\n  \n  return(list(\n    correlation_matrix = cor_matrix,\n    high_correlation_pairs = high_cor_pairs\n  ))\n}\n\n# Plot correlation matrix\nplot_correlation_matrix <- function(cor_matrix) {\n  cat(\"Generating correlation plot...\\n\")\n  corrplot(cor_matrix, method = \"color\", \n           type = \"upper\", \n           tl.col = \"black\",\n           tl.srt = 45,\n           addCoef.col = \"black\",\n           number.cex = 0.7,\n           diag = FALSE,\n           col = colorRampPalette(c(\"#6D9EC1\", \"white\", \"#E46726\"))(200),\n           title = \"Correlation Matrix of Numeric Variables\")\n  cat(\"Correlation plot generated.\\n\")\n}\n```\n:::\n\n\n\n\n### 5.2 VIF Analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"VIF analysis functions\"}\n# Function to calculate VIF\ncalculate_vif <- function(formula, data) {\n  cat(\"Calculating VIF values using full dataset...\\n\")\n  model <- lm(formula, data = data)\n  vif_values <- car::vif(model)\n  \n  vif_df <- data.frame(\n    Variable = names(vif_values),\n    VIF = as.numeric(vif_values)\n  )\n  \n  cat(\"VIF calculation complete.\\n\")\n  return(vif_df)\n}\n\n# Plot VIF values\nplot_vif <- function(vif_df, threshold = 5) {\n  cat(\"Generating VIF plot...\\n\")\n  p <- ggplot(vif_df, aes(x = reorder(Variable, VIF), y = VIF)) +\n    geom_bar(stat = \"identity\", fill = ifelse(vif_df$VIF > threshold, \"red\", \"steelblue\")) +\n    geom_hline(yintercept = threshold, linetype = \"dashed\", color = \"red\") +\n    geom_text(aes(label = sprintf(\"%.2f\", VIF)), hjust = -0.1) +\n    coord_flip() +\n    theme_minimal() +\n    labs(title = \"Variance Inflation Factors\",\n         subtitle = paste(\"Values above\", threshold, \"indicate potential multicollinearity\"),\n         x = \"Variables\", y = \"VIF\")\n  cat(\"VIF plot generated.\\n\")\n  return(p)\n}\n```\n:::\n\n\n\n\n### 5.3 Outlier Detection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Outlier detection functions\"}\n# Function to check for outliers\ncheck_outliers <- function(data) {\n  cat(\"Detecting outliers on full dataset...\\n\")\n  # Select only numeric variables\n  numeric_data <- data %>% select_if(is.numeric)\n  \n  # Use IQR method to detect outliers\n  outliers_summary <- sapply(numeric_data, function(x) {\n    q1 <- quantile(x, 0.25, na.rm = TRUE)\n    q3 <- quantile(x, 0.75, na.rm = TRUE)\n    iqr <- q3 - q1\n    lower_bound <- q1 - 1.5 * iqr\n    upper_bound <- q3 + 1.5 * iqr\n    sum(x < lower_bound | x > upper_bound, na.rm = TRUE)\n  })\n  \n  result <- data.frame(\n    variable = names(outliers_summary),\n    outlier_count = outliers_summary,\n    percentage = (outliers_summary / nrow(data)) * 100\n  )\n  cat(\"Outlier detection complete.\\n\")\n  return(result)\n}\n\n# Create boxplot for a variable\ncreate_boxplot <- function(data, variable) {\n  cat(\"Creating boxplot for\", variable, \"...\\n\")\n  p <- ggplot(data, aes(y = .data[[variable]])) +\n    geom_boxplot(fill = \"lightblue\", outlier.color = \"red\", outlier.size = 3) +\n    theme_minimal() +\n    labs(title = paste(\"Box Plot of\", variable),\n         subtitle = \"Red points indicate potential outliers\",\n         x = \"\",\n         y = variable)\n  return(p)\n}\n```\n:::\n\n\n\n\n### 5.4 Linearity Check\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Linearity check function\"}\n# Function to check linearity assumptions with scatter plots\ncheck_linearity <- function(data, dependent_var, independent_vars) {\n  plots <- list()\n  \n  # Remove backticks if present for display purposes\n  display_dep_var <- gsub(\"`\", \"\", dependent_var)\n  \n  for(var in independent_vars) {\n    cat(\"Checking linearity for\", display_dep_var, \"vs\", gsub(\"`\", \"\", var), \"...\\n\")\n    # Handle variable names with spaces properly\n    y_var <- if(grepl(\" \", dependent_var) && !grepl(\"`\", dependent_var)) paste0(\"`\", dependent_var, \"`\") else dependent_var\n    x_var <- if(grepl(\" \", var) && !grepl(\"`\", var)) paste0(\"`\", var, \"`\") else var\n    \n    p <- ggplot(data, aes_string(x = x_var, y = y_var)) +\n      geom_point(alpha = 0.3) +\n      geom_smooth(method = \"loess\", color = \"red\") +\n      geom_smooth(method = \"lm\", color = \"blue\") +\n      theme_minimal() +\n      labs(title = paste(\"Relationship between\", display_dep_var, \"and\", gsub(\"`\", \"\", var)),\n           subtitle = \"Blue = linear fit, Red = loess smoothing\")\n    \n    plots[[var]] <- p\n  }\n  \n  cat(\"Linearity checks complete.\\n\")\n  return(plots)\n}\n```\n:::\n\n\n\n\n## 6. MLR Analysis Execution\n\n### 6.1 Correlation Analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Correlation analysis execution\"}\n# 1. CORRELATION ANALYSIS\ncat(\"\\n--- CORRELATION ANALYSIS ---\\n\")\nmc_result <- check_multicollinearity(data)\n\n# Display correlation matrix\nplot_correlation_matrix(mc_result$correlation_matrix)\n\n# Display highly correlated variable pairs\ncat(\"\\nHighly correlated variable pairs (|r| > 0.7):\\n\")\nif(nrow(mc_result$high_correlation_pairs) == 0) {\n  cat(\"No highly correlated variable pairs found.\\n\")\n} else {\n  print(mc_result$high_correlation_pairs)\n}\n```\n:::\n\n\n\n\n![](images/0e175ac3f1deaa77a8f88f6ec3e0f38.png)\n\n### 6.2 VIF Analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"VIF analysis execution\"}\n# 2. VIF ANALYSIS\ncat(\"\\n--- VIF ANALYSIS ---\\n\")\n# Define formula for initial model - use LogPrice if available, otherwise use Property Prices\ntarget_var <- if(\"LogPrice\" %in% names(data)) \"LogPrice\" else \"`Property Prices`\"\ncat(\"Using\", target_var, \"as the target variable\\n\")\n\n# Define formula for initial model\ninitial_formula <- as.formula(paste(target_var, \"~ Size + Floor + `Highest floor` + \n                             Units + Parking + Year + `Dist. Subway` + \n                             `Dist. CBD` + `Pop. Density` + `Higher Degree`\"))\n\n# Calculate and plot VIF\nvif_result <- calculate_vif(initial_formula, data)\ncat(\"\\nVIF Results:\\n\")\nprint(vif_result)\nvif_plot <- plot_vif(vif_result)\nprint(vif_plot)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"High VIF analysis (optional)\"}\n# Identify variables with high VIF for potentially removing\nhigh_vif_vars <- vif_result$Variable[vif_result$VIF > 5]\nif(length(high_vif_vars) > 0) {\n  cat(\"\\nVariables with high VIF (>5):\", paste(high_vif_vars, collapse=\", \"), \"\\n\")\n  cat(\"Consider removing these variables to reduce multicollinearity.\\n\")\n  \n  # Example of creating a reduced model formula without the highest VIF variable\n  if(length(high_vif_vars) > 0) {\n    highest_vif_var <- vif_result$Variable[which.max(vif_result$VIF)]\n    cat(\"\\nCreating a reduced model by removing\", highest_vif_var, \"...\\n\")\n    \n    reduced_formula <- as.formula(paste(target_var, \"~\", \n                                      paste(setdiff(vif_result$Variable, highest_vif_var), \n                                            collapse = \" + \")))\n    \n    reduced_vif <- calculate_vif(reduced_formula, data)\n    cat(\"\\nVIF Results after removing\", highest_vif_var, \":\\n\")\n    print(reduced_vif)\n    reduced_vif_plot <- plot_vif(reduced_vif)\n    print(reduced_vif_plot)\n  }\n}\n```\n:::\n\n\n\n\n### ![](images/9ac028dfc208c5438866414599a99b8.png)\n\n### 6.3 Outlier Detection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Outlier detection execution\"}\n# 3. OUTLIER DETECTION\ncat(\"\\n--- OUTLIER DETECTION ---\\n\")\noutliers <- check_outliers(data)\ncat(\"\\nOutlier Detection Summary (sorted by count):\\n\")\nprint(outliers[order(-outliers$outlier_count), ])\n\n# Create boxplots for key variables using sample data\ncat(\"\\nGenerating boxplots for key variables...\\n\")\nkey_vars <- c(\"Property Prices\", \"Size\", \"Floor\", \"Units\", \"Dist. Subway\")\nif(\"LogPrice\" %in% names(data)) {\n  key_vars <- c(key_vars, \"LogPrice\")\n}\n\nboxplots <- list()\nfor(var in key_vars) {\n  boxplots[[var]] <- create_boxplot(viz_data, var)\n  print(boxplots[[var]])\n}\n```\n:::\n\n\n\n\n### ![](images/e2e99ea520c32d17cc8e72a5300ef9c.png)\n\n### 6.4 Linearity Checks\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Linearity checks - original variables\"}\n# 4. LINEARITY CHECKS\ncat(\"\\n--- LINEARITY CHECKS ---\\n\")\n# Check linearity for key variables using sample data\nindep_vars <- c(\"Size\", \"Floor\", \"Year\", \"Dist. Subway\", \"Dist. CBD\")\n\ncat(\"\\nChecking linearity with original Property Prices...\\n\")\nlinearity_original <- check_linearity(viz_data, \"Property Prices\", indep_vars)\nfor(i in seq_along(linearity_original)) {\n  print(linearity_original[[i]])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Linearity checks - log-transformed variables\"}\n# Linearity checks with log-transformed target\nif(\"LogPrice\" %in% names(data)) {\n  cat(\"\\nChecking linearity with log-transformed Property Prices (LogPrice)...\\n\")\n  linearity_log <- check_linearity(viz_data, \"LogPrice\", indep_vars)\n  for(i in seq_along(linearity_log)) {\n    print(linearity_log[[i]])\n  }\n  \n  # Compare linear fit of original vs transformed\n  cat(\"\\nComparing linearity improvement with log transformation...\\n\")\n  for(i in seq_along(indep_vars)) {\n    var <- indep_vars[i]\n    var_display <- gsub(\"`\", \"\", var)\n    p1 <- linearity_original[[i]] + ggtitle(paste(\"Original:\", var_display, \"vs Property Prices\"))\n    p2 <- linearity_log[[i]] + ggtitle(paste(\"Log-transformed:\", var_display, \"vs LogPrice\"))\n    comparison <- gridExtra::grid.arrange(p1, p2, ncol = 2)\n    print(comparison)\n  }\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Scatterplot matrix\"}\n# 5. SCATTERPLOT MATRIX (using sample data)\ncat(\"\\n--- SCATTERPLOT MATRIX ---\\n\")\ncat(\"Creating scatterplot matrix (this may take a while)...\\n\")\nkey_vars_for_pairs <- c(\"Property Prices\", \"Size\", \"Floor\", \"Dist. Subway\", \"Pop. Density\")\nif(\"LogPrice\" %in% names(viz_data)) {\n  key_vars_for_pairs[1] <- \"LogPrice\"  # Replace Property Prices with LogPrice if available\n}\npairs_plot <- GGally::ggpairs(viz_data[, key_vars_for_pairs])\nprint(pairs_plot)\n\ncat(\"\\nMLR pre-check analysis complete!\\n\")\n```\n:::\n\n\n\n\n![](images/clipboard-122698399.png)\n\n## 7. Final Model Fitting\n\nBased on the pre-check analysis, a final model is developed with carefully selected variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Final model fitting\"}\n# 7. RECOMMENDED FINAL MODEL\ncat(\"\\n--- RECOMMENDED FINAL MODEL ---\\n\")\n# Based on analysis, suggest a final model\nif(\"LogPrice\" %in% names(data)) {\n  # Create a final model including significant predictors\n  model_formula <- paste(\"LogPrice ~ Size + Floor + Units + Parking + Year +\",\n                        \"`Dist. Subway` + `Dist. CBD` + `Pop. Density` +\",\n                        \"`Higher Degree` + Spring + Fall + Winter\")\n  \n  cat(\"Recommended model formula based on analysis:\\n\")\n  cat(model_formula, \"\\n\\n\")\n  \n  # Fit the final model\n  cat(\"Fitting final model...\\n\")\n  final_model <- lm(as.formula(model_formula), data = data)\n  \n  # Display model summary\n  cat(\"\\nFinal Model Summary:\\n\")\n  print(summary(final_model))\n  \n  # Calculate adjusted R-squared\n  cat(\"\\nAdjusted R-squared:\", summary(final_model)$adj.r.squared, \"\\n\")\n  \n  # Display ANOVA table\n  cat(\"\\nANOVA Table:\\n\")\n  print(anova(final_model))\n} else {\n  cat(\"No log-transformed target variable (LogPrice) found. Consider creating one before fitting the final model.\\n\")\n}\n```\n:::\n\n\n\n\n## 8. Model Diagnostics\n\nDiagnostic checks ensure that the model meets regression assumptions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Residual plots\"}\n# Check residuals\ncat(\"\\n--- FINAL MODEL DIAGNOSTICS ---\\n\")\n\n# Create residual plots\ncat(\"Generating residual plots...\\n\")\n\n# Setting a larger plotting area with smaller margins before creating plots\npar(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # Reduce margins\nplot(final_model)\n\n# Reset plotting parameters\npar(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)  # Reset to default margins\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Statistical diagnostic tests\"}\n# Shapiro-Wilk test on a sample of residuals (since dataset is large)\nresiduals_sample <- sample(residuals(final_model), min(5000, length(residuals(final_model))))\nsw_test <- shapiro.test(residuals_sample)\ncat(\"\\nShapiro-Wilk normality test on residuals (sample):\\n\")\nprint(sw_test)\n\n# Check for heteroscedasticity with Breusch-Pagan test\ncat(\"\\nBreusch-Pagan test for heteroscedasticity:\\n\")\nbp_test <- car::ncvTest(final_model)\nprint(bp_test)\n```\n:::\n\n\n\n\n## 9. Variable Importance Analysis\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Variable importance analysis\"}\n# Load the lm.beta package for standardized coefficients\nif(!require(lm.beta)) install.packages(\"lm.beta\")\nlibrary(lm.beta)\n\n# Variable importance\ncat(\"\\nVariable Importance (standardized coefficients):\\n\")\nstd_coef <- lm.beta::lm.beta(final_model)\nprint(std_coef)\n\n# Plot variable importance\ncoef_df <- data.frame(\n  Variable = names(std_coef$standardized.coefficients),\n  Importance = abs(std_coef$standardized.coefficients)\n)\ncoef_df <- coef_df[-1, ]  # Remove intercept\n\nimportance_plot <- ggplot(coef_df, aes(x = reorder(Variable, Importance), y = Importance)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Variable Importance in Final Model\",\n       subtitle = \"Based on standardized coefficients\",\n       x = \"Variables\",\n       y = \"Absolute Standardized Coefficient\")\n\nprint(importance_plot)\n```\n:::\n\n\n\n\n## 10. Model Prediction Accuracy\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Prediction accuracy assessment\"}\n# Prediction accuracy assessment using 10% of data\ncat(\"\\nAssessing prediction accuracy on random sample...\\n\")\nset.seed(123)  # For reproducibility\nsample_indices <- sample(nrow(data), nrow(data) * 0.1)\ntest_data <- data[sample_indices, ]\npredicted_values <- predict(final_model, newdata = test_data)\n\n# Calculate RMSE and MAE\nrmse <- sqrt(mean((test_data$LogPrice - predicted_values)^2))\nmae <- mean(abs(test_data$LogPrice - predicted_values))\n\ncat(\"Root Mean Square Error (RMSE):\", rmse, \"\\n\")\ncat(\"Mean Absolute Error (MAE):\", mae, \"\\n\")\n\n# Convert back to original scale for interpretation\nrmse_original <- mean((exp(test_data$LogPrice) - exp(predicted_values))^2)\nmae_original <- mean(abs(exp(test_data$LogPrice) - exp(predicted_values)))\n\ncat(\"Mean Squared Error on original scale:\", rmse_original, \"\\n\")\ncat(\"Mean Absolute Error on original scale:\", mae_original, \"\\n\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Prediction plot\"}\n# Prediction plot\nprediction_df <- data.frame(\n  Actual = test_data$LogPrice,\n  Predicted = predicted_values\n)\n\nprediction_plot <- ggplot(prediction_df, aes(x = Actual, y = Predicted)) +\n  geom_point(alpha = 0.3) +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  theme_minimal() +\n  labs(title = \"Actual vs. Predicted Values\",\n       subtitle = \"Red line indicates perfect prediction\",\n       x = \"Actual LogPrice\",\n       y = \"Predicted LogPrice\")\n\nprint(prediction_plot)\n```\n:::\n\n\n\n\n## 11. Final Model Equation and Conclusion\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Final model equation\"}\n# Final model equation\ncat(\"\\nFinal MLR Model Equation:\\n\")\ncoef_values <- coef(final_model)\nequation <- paste(\"LogPrice =\", round(coef_values[1], 4))\n\nfor (i in 2:length(coef_values)) {\n  var_name <- names(coef_values)[i]\n  coef_value <- coef_values[i]\n  \n  if (coef_value >= 0) {\n    equation <- paste(equation, \"+\", round(coef_value, 4), \"*\", var_name)\n  } else {\n    equation <- paste(equation, round(coef_value, 4), \"*\", var_name)\n  }\n}\n\ncat(equation, \"\\n\")\ncat(\"\\nMLR analysis complete!\\n\")\n```\n:::\n\n\n\n\n## 12. Shiny Dashboard UI Design\n\nBased on the provided screenshots, the Shiny Dashboard application has been designed with the following components:\n\n### 12.1 Overall Layout\n\n-   Header with \"Property Price\" title and menu toggle\n-   Green themed sidebar for MLR model building\n-   Main panel with tabbed interface for different analysis aspects\n\n### 12.2 Sidebar Components\n\n-   **MLR Model Builder** section\n-   Variable selection panels organized by categories:\n    -   Property Characteristics (Size, Floor, Units, Parking, Year)\n    -   Location Variables (Dist. Subway, Dist. CBD, Pop. Density)\n    -   Demographic Variables (Higher Degree)\n    -   Seasonal Variables (Spring, Fall, Winter)\n-   Model Settings section with:\n    -   VIF Threshold slider (default set to 5)\n    -   Target Variable Transformation radio buttons (Original, Log Transform, Square Root)\n-   Action buttons:\n    -   \"Run MLR Analysis\" button\n    -   \"Use Recommended Model\" button\n\n### 12.3 Main Panel Tabs\n\n-   **Model Summary**: Displays regression equation, coefficients table, and model fit statistics\n-   **Variable Importance**: Shows standardized coefficients in a bar chart format\n-   **Multicollinearity**: Presents correlation matrix and VIF analysis\n-   **Model Diagnostics**: Shows residual plots and diagnostic test results\n\n### 12.4 Visualization Components\n\n1.  **Model Diagnostics Tab**:\n    -   Residuals vs Fitted plot showing model fit\n    -   Normal Q-Q plot for assessing normality\n    -   Scale-Location plot for checking homoscedasticity\n    -   Residuals histogram\n    -   Diagnostic test results for normality and heteroscedasticity\n    -   ![](images/clipboard-1907801116.png)\n2.  **Multicollinearity Tab**:\n    -   Correlation matrix heatmap with coefficient values\n    -   Variance Inflation Factors bar chart\n    -   Table of highly correlated variable pairs\n    -   ![](images/clipboard-2427009886.png)\n3.  **Variable Importance Tab**:\n    -   Bar chart of standardized coefficients\n    -   Interpretation panel explaining relative variable importance\n    -   Key findings summary\n    -   ![](images/clipboard-3331705758.png)\n4.  **Model Summary Tab**:\n    -   Scrollable regression equation\n    -   Detailed coefficient table with estimates, standard errors, t-values and p-values\n    -   Model fit statistics panel showing R-squared, Adjusted R-squared, F-statistic, and Residual Standard Error\n    -   ![](images/bb8be398661d56c295edf46b2042f0b.png)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Shiny Dashboard UI\"}\n# UI design for the Shiny dashboard\nui <- dashboardPage(\n  dashboardHeader(title = \"Property Price\"),\n  \n  dashboardSidebar(\n    width = 300,\n    tags$div(style = \"background-color: #9DC183; padding: 10px; margin-top: -15px; margin-bottom: 15px;\",\n             h4(\"Multiple Linear Regression\", style = \"color: #FFF;\")),\n    \n    # Model Builder Box\n    box(\n      title = \"MLR Model Builder\", \n      width = NULL, \n      solidHeader = TRUE, \n      status = \"success\",\n      collapsible = FALSE,\n      \n      # Variable selection sections\n      h4(\"Select Variables:\"),\n      \n      # Property Characteristics\n      h5(\"Property Characteristics:\"),\n      div(\n        style = \"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f9f9f9;\",\n        fluidRow(\n          column(width = 12,\n                 div(\n                   style = \"margin-bottom: 5px;\",\n                   tags$button(\"Size\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Floor\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Units\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Parking\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Year\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\")\n                 )\n          )\n        ),\n        tags$div(\"Select Variables\", style = \"color: #666; font-size: 12px;\")\n      ),\n      \n      # Location Variables\n      h5(\"Location Variables:\"),\n      div(\n        style = \"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f9f9f9;\",\n        fluidRow(\n          column(width = 12,\n                 div(\n                   style = \"margin-bottom: 5px;\",\n                   tags$button(\"Dist. Subway\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Dist. CBD\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Pop. Density\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\")\n                 )\n          )\n        ),\n        tags$div(\"Select Variables\", style = \"color: #666; font-size: 12px;\")\n      ),\n      \n      # Demographic Variables\n      h5(\"Demographic Variables:\"),\n      div(\n        style = \"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f9f9f9;\",\n        fluidRow(\n          column(width = 12,\n                 div(\n                   style = \"margin-bottom: 5px;\",\n                   tags$button(\"Higher Degree\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\")\n                 )\n          )\n        ),\n        tags$div(\"Select Variables\", style = \"color: #666; font-size: 12px;\")\n      ),\n      \n      # Seasonal Variables\n      h5(\"Seasonal Variables:\"),\n      div(\n        style = \"border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; background-color: #f9f9f9;\",\n        fluidRow(\n          column(width = 12,\n                 div(\n                   style = \"margin-bottom: 5px;\",\n                   tags$button(\"Spring\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Fall\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\"),\n                   tags$button(\"Winter\", class = \"btn btn-sm\", style = \"background-color: #D4EAC7; margin: 2px;\")\n                 )\n          )\n        ),\n        tags$div(\"Select Variables\", style = \"color: #666; font-size: 12px;\")\n      ),\n      \n      # Model Settings\n      h4(\"Model Settings:\"),\n      \n      # VIF Threshold\n      h5(\"VIF Threshold:\"),\n      sliderInput(\"vif_threshold\", NULL, min = 1, max = 10, value = 5, step = 0.5),\n      tags$div(\"Variables with VIF above threshold will be highlighted\", style = \"color: #666; font-size: 12px;\"),\n      \n      # Target Variable Transformation\n      h5(\"Target Variable Transformation:\"),\n      radioButtons(\"transformation\", NULL, \n                  choices = list(\"Original\" = \"original\", \n                                \"Log Transform\" = \"log\", \n                                \"Square Root\" = \"sqrt\"),\n                  selected = \"log\"),\n      \n      # Action Buttons\n      actionButton(\"run_analysis\", \"Run MLR Analysis\", \n                  style = \"background-color: #29793B; color: white; width: 100%;\"),\n      br(), br(),\n      actionButton(\"use_recommended\", \"Use Recommended Model\", \n                  style = \"background-color: #9DC183; color: white; width: 100%;\")\n    )\n  ),\n  \n  dashboardBody(\n    tags$head(\n      tags$style(HTML(\"\n        .content-wrapper, .right-side {\n          background-color: #f5f5f5;\n        }\n        .box {\n          border-top: 3px solid #9DC183;\n        }\n        .nav-tabs-custom>.nav-tabs>li.active {\n          border-top-color: #9DC183;\n        }\n      \"))\n    ),\n    \n    fluidRow(\n      column(width = 12,\n             div(style = \"background-color: #9DC183; padding: 5px; margin-bottom: 15px;\",\n                 h4(\"Multiple Linear Regression\", style = \"color: #FFF;\"))\n      )\n    ),\n    \n    tabBox(\n      width = 12,\n      id = \"tabbox\",\n      tabPanel(\"Model Summary\", value = \"summary\",\n               fluidRow(\n                 box(\n                   title = \"Regression Equation\", width = 12, status = \"success\",\n                   div(\n                     style = \"overflow-x: auto; white-space: nowrap;\",\n                     \"LogPrice = -0.4073 + 0.0012 * Size + 5e-04 * Floor + 0 * Units + 0.01 * Parking + 0.0013 * Year -0.0065 * `Dist. Subway` + 0 * `Dist. CBD` + 0 * `Pop. Density` + 7e-04 * `Higher Degree` + 0.0014 * Spring1 + 0.0076 * Fall1 + 0.0048 * Winter1\"\n                   )\n                 )\n               ),\n               fluidRow(\n                 box(\n                   title = \"Model Coefficients\", width = 8, status = \"success\",\n                   div(style = \"overflow-x: auto;\",\n                       dataTableOutput(\"coefficients_table\")\n                   )\n                 ),\n                 column(\n                   width = 4,\n                   box(\n                     title = \"R-squared\", width = NULL, status = \"success\",\n                     valueBox(\"0.6675\", \"R-squared\", icon = NULL, color = \"green\", width = 12)\n                   ),\n                   box(\n                     title = \"Adjusted R-squared\", width = NULL, status = \"success\",\n                     valueBox(\"0.6674\", \"Adjusted R-squared\", icon = NULL, color = \"green\", width = 12)\n                   ),\n                   box(\n                     title = \"F-statistic\", width = NULL, status = \"success\",\n                     valueBox(\"8803.27 on 12 and 52631 DF, p < 0.001\", \"F-statistic\", icon = NULL, color = \"green\", width = 12)\n                   ),\n                   box(\n                     title = \"Residual Standard Error\", width = NULL, status = \"success\",\n                     valueBox(\"0.0323\", \"Residual Std. Error\", icon = NULL, color = \"green\", width = 12)\n                   )\n                 )\n               )\n      ),\n      tabPanel(\"Variable Importance\", value = \"importance\",\n               fluidRow(\n                 box(\n                   title = \"Variable Importance\", width = 12, status = \"success\",\n                   plotOutput(\"variable_importance_plot\", height = \"500px\")\n                 )\n               ),\n               fluidRow(\n                 box(\n                   title = \"Interpretation\", width = 12, status = \"success\",\n                   h4(\"Key Findings:\"),\n                   p(\"The standardized coefficients represent the relative importance of each predictor variable in the model.\"),\n                   \n                   h5(\"Most Influential Positive Factors:\"),\n                   tags$ul(\n                     tags$li(strong(\"Size: 0.6163\"), \"(38.4% influence)\"),\n                     tags$li(strong(\"Year: 0.2374\"), \"(14.8% influence)\"),\n                     tags$li(strong(\"Higher Degree: 0.1298\"), \"(8.1% influence)\")\n                   ),\n                   \n                   h5(\"Most Influential Negative Factors:\"),\n                   tags$ul(\n                     tags$li(strong(\"Dist. Subway: -0.1185\"), \"(7.4% influence)\")\n                   ),\n                   \n                   tags$p(style = \"color: #666; font-style: italic;\", \n                          \"Note: The standardized coefficients allow direct comparison between variables measured on different scales. \n                          Variables with higher absolute values have a stronger effect on the property price.\")\n                 )\n               )\n      ),\n      tabPanel(\"Multicollinearity\", value = \"multicollinearity\",\n               fluidRow(\n                 box(\n                   title = \"Correlation Matrix\", width = 6, status = \"success\",\n                   plotOutput(\"correlation_matrix\", height = \"400px\")\n                 ),\n                 box(\n                   title = \"Variance Inflation Factors\", width = 6, status = \"success\",\n                   plotOutput(\"vif_plot\", height = \"400px\")\n                 )\n               ),\n               fluidRow(\n                 box(\n                   title = \"Highly Correlated Variables\", width = 12, status = \"success\",\n                   div(\n                     dataTableOutput(\"high_correlation_table\"),\n                     p(\"Showing 1 to 1 of 1 entries\")\n                   )\n                 )\n               )\n      ),\n      tabPanel(\"Model Diagnostics\", value = \"diagnostics\",\n               fluidRow(\n                 box(\n                   title = \"Residuals vs Fitted\", width = 6, status = \"success\",\n                   plotOutput(\"residuals_fitted_plot\", height = \"300px\")\n                 ),\n                 box(\n                   title = \"Normal Q-Q Plot\", width = 6, status = \"success\",\n                   plotOutput(\"qq_plot\", height = \"300px\")\n                 )\n               ),\n               fluidRow(\n                 box(\n                   title = \"Scale-Location Plot\", width = 6, status = \"success\",\n                   plotOutput(\"scale_location_plot\", height = \"300px\")\n                 ),\n                 box(\n                   title = \"Residuals Histogram\", width = 6, status = \"success\",\n                   plotOutput(\"residuals_histogram\", height = \"300px\")\n                 )\n               ),\n               fluidRow(\n                 valueBox(\n                   value = \"W = 0.991, p < 0.001 (Non-normal)\",\n                   subtitle = \"Shapiro-Wilk Test (Normality)\",\n                   icon = icon(\"check-circle\"),\n                   color = \"green\",\n                   width = 6\n                 ),\n                 valueBox(\n                   value = \"χ² = 9.7, p = 0.002 (Heteroscedastic)\",\n                   subtitle = \"Breusch-Pagan Test (Heteroscedasticity)\",\n                   icon = icon(\"exclamation-circle\"),\n                   color = \"green\",\n                   width = 6\n                 )\n               )\n      )\n    )\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Shiny Dashboard Server\"}\n# Server logic for the Shiny dashboard\nserver <- function(input, output, session) {\n  \n  # Render coefficients table\n  output$coefficients_table <- renderDataTable({\n    data.frame(\n      Variable = c(\"(Intercept)\", \"Size\", \"Floor\", \"Units\", \"Parking\", \"Year\", \n                  \"Dist. Subway\", \"Dist. CBD\", \"Pop. Density\", \"Higher Degree\", \n                  \"Spring1\", \"Fall1\", \"Winter1\"),\n      Estimate = c(-0.4073, 0.0012, 0.0005, 0.0000, 0.0100, 0.0013, -0.0065, \n                   0.0000, 0.0000, 0.0007, 0.0014, 0.0076, 0.0048),\n      `Std. Error` = c(0.0292, 0.0000, 0.0000, 0.0000, 0.0003, 0.0000, 0.0001, \n                       0.0000, 0.0000, 0.0000, 0.0004, 0.0004, 0.0004),\n      `t value` = c(-13.9269, 220.9179, 26.7469, 44.6102, 39.6990, 89.5777, \n                    -45.8230, 11.1325, 23.7707, 90.1631, 3.2289, 18.9962, 11.3244),\n      `p-value` = c(\"5.21e-44\", \"0.00\", \"1.50e-156\", \"0.00\", \"0.00\", \"0.00\", \n                    \"0.00\", \"9.38e-29\", \"3.04e-124\", \"0.00\", \"0.00124\", \"4.11e-80\", \"1.08e-29\"),\n      Significance = c(\"***\", \"***\", \"***\", \"***\", \"***\", \"***\", \n                       \"***\", \"***\", \"***\", \"***\", \"**\", \"***\", \"***\")\n    ),\n    options = list(\n      pageLength = 13,\n      searching = TRUE,\n      lengthChange = FALSE,\n      dom = 'lrtip'\n    )\n  })\n  \n  # Render variable importance plot\n  output$variable_importance_plot <- renderPlot({\n    # Create sample data for the plot\n    importance_data <- data.frame(\n      Variable = c(\"Size\", \"Year\", \"Higher Degree\", \"Dist. Subway\", \"Units\", \n                   \"Parking\", \"Floor\", \"Fall1\", \"Pop. Density\", \"Winter1\", \n                   \"Dist. CBD\", \"Spring1\"),\n      Importance = c(0.6163, 0.2374, 0.1298, -0.1185, 0.1184, 0.1103, 0.0723, \n                     0.0645, 0.0602, 0.0370, 0.0286, 0.0104)\n    )\n    \n    # Create the plot\n    ggplot(importance_data, aes(x = reorder(Variable, Importance), y = Importance)) +\n      geom_bar(stat = \"identity\", fill = \"#9DC183\") +\n      coord_flip() +\n      theme_minimal() +\n      labs(title = \"Variable Importance (Standardized Coefficients)\",\n           x = \"Variable\",\n           y = \"Standardized Coefficient\") +\n      theme(\n        plot.title = element_text(size = 16, face = \"bold\"),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10)\n      )\n  })\n  \n  # Render correlation matrix\n  output$correlation_matrix <- renderPlot({\n    # This is a placeholder - in a real app, you would calculate this from the data\n    sample_cor_matrix <- matrix(c(\n      1.00, 0.48, 0.68, 0.14, 0.53, 0.00, -0.51, 0.00, -0.17, 0.11,\n      0.48, 1.00, 0.24, 0.08, 0.08, -0.03, 0.00, 0.00, -0.12, 0.09,\n      0.68, 0.24, 1.00, 0.13, 0.00, 0.00, -0.12, 0.00, -0.03, 0.00,\n      0.14, 0.08, 0.13, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.10,\n      0.53, 0.08, 0.00, 0.00, 1.00, 0.03, -0.03, 0.00, -0.09, 0.00,\n      0.00, -0.03, 0.00, 0.00, 0.03, 1.00, -0.17, 0.00, -0.11, -0.08,\n      -0.51, 0.00, -0.12, 0.00, -0.03, -0.17, 1.00, 0.00, 0.13, -0.12,\n      0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00,\n      -0.17, -0.12, -0.03, 0.00, -0.09, -0.11, 0.13, 0.00, 1.00, 0.04,\n      0.11, 0.09, 0.00, 0.10, 0.00, -0.08, -0.12, 0.00, 0.04, 1.00\n    ), nrow = 10)\n    \n    colnames(sample_cor_matrix) <- rownames(sample_cor_matrix) <- c(\"Size\", \"Floor\", \"Units\", \n                                                                   \"Parking\", \"Year\", \"Dist. Subway\", \n                                                                   \"Dist. CBD\", \"Pop. Density\", \n                                                                   \"Higher Degree\", \"LogPrice\")\n    \n    # Plot correlation matrix\n    corrplot(sample_cor_matrix, method = \"color\", \n             type = \"upper\", \n             tl.col = \"black\", \n             tl.srt = 45, \n             addCoef.col = \"black\", \n             number.cex = 0.7,\n             diag = FALSE,\n             title = \"Correlation Matrix of Numeric Variables\")\n  })\n  \n  # Render VIF plot\n  output$vif_plot <- renderPlot({\n    # Sample VIF data\n    vif_data <- data.frame(\n      Variable = c(\"Year\", \"Winter\", \"Units\", \"Spring\", \"Size\", \"Parking\", \n                  \"Floor\", \"Fall\", \"Pop. Density\", \"Higher Degree\", \"Dist. Subway\", \n                  \"Dist. CBD\"),\n      VIF = c(1.17, 1.05, 1.31, 1.02, 1.22, 1.12, 1.31, 1.07, 1.08, 1.17, 1.12, 1.05)\n    )\n    \n    # Create VIF plot\n    ggplot(vif_data, aes(x = reorder(Variable, VIF), y = VIF)) +\n      geom_bar(stat = \"identity\", fill = \"#9DC183\") +\n      geom_hline(yintercept = 5, linetype = \"dashed\", color = \"red\") +\n      coord_flip() +\n      theme_minimal() +\n      labs(title = \"Variance Inflation Factors\",\n           x = \"Variable\",\n           y = \"VIF\") +\n      theme(\n        plot.title = element_text(size = 16, face = \"bold\"),\n        axis.title = element_text(size = 12),\n        axis.text = element_text(size = 10)\n      )\n  })\n  \n  # Render high correlation table\n  output$high_correlation_table <- renderDataTable({\n    data.frame(\n      Message = c(\"No high correlations detected (r > 0.7)\")\n    ),\n    options = list(\n      dom = 't',\n      paging = FALSE,\n      searching = FALSE\n    )\n  })\n  \n  # Model diagnostic plots\n  output$residuals_fitted_plot <- renderPlot({\n    # This would normally be generated from the model\n    # For demonstration purposes, using a static image representation\n    ggplot() + \n      annotate(\"text\", x = 0.5, y = 0.5, label = \"Residuals vs Fitted Plot would appear here\", size = 5) +\n      theme_void()\n  })\n  \n  output$qq_plot <- renderPlot({\n    # Static representation\n    ggplot() + \n      annotate(\"text\", x = 0.5, y = 0.5, label = \"Normal Q-Q Plot would appear here\", size = 5) +\n      theme_void()\n  })\n  \n  output$scale_location_plot <- renderPlot({\n    # Static representation\n    ggplot() + \n      annotate(\"text\", x = 0.5, y = 0.5, label = \"Scale-Location Plot would appear here\", size = 5) +\n      theme_void()\n  })\n  \n  output$residuals_histogram <- renderPlot({\n    # Static representation\n    ggplot() + \n      annotate(\"text\", x = 0.5, y = 0.5, label = \"Residuals Histogram would appear here\", size = 5) +\n      theme_void()\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n\n\n## 13. Conclusion\n\n### Key Findings\n\n-   **Size** is the most influential predictor, with a standardized coefficient of 0.6163\n-   **Year** is the second most important predictor (0.2374), indicating newer properties command higher prices\n-   **Higher Degree** (0.1298) represents neighborhood socioeconomic status and has a significant positive impact\n-   **Dist. Subway** (-0.1185) has a negative impact, confirming properties closer to subway stations are more valuable\n-   The model has strong predictive power, explaining 66.75% of the variation in log-transformed property prices (R² = 0.6675)\n\n### Model Performance\n\n-   All variables in the final model are statistically significant (p \\< 0.01)\n-   No severe multicollinearity detected (all VIF values \\< 5)\n-   The model's prediction accuracy is good, with RMSE = 0.0316 in log-price units\n\n### Limitations and Future Work\n\n-   Minor heteroscedasticity detected (Breusch-Pagan test: χ² = 9.7, p = 0.002)\n-   Slight deviation from normality in residuals (Shapiro-Wilk test: W = 0.991, p \\< 0.001)\n-   Future work could explore non-linear relationships and interaction effects\n\nThe MLR model provides valuable insights into property price determinants, with practical applications for real estate valuation, investment decision-making, and urban planning.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}